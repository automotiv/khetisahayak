name: ML Training and Deployment Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'ml/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'ml/**'
  workflow_dispatch:
    inputs:
      train_model:
        description: 'Run model training'
        required: true
        default: 'false'
      deploy_model:
        description: 'Deploy model to production'
        required: true
        default: 'false'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd ml
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest black isort
      
      - name: Lint with flake8
        run: |
          cd ml
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Check formatting with black
        run: |
          cd ml
          black --check .
      
      - name: Check imports with isort
        run: |
          cd ml
          isort --check-only --profile black .
      
      - name: Run tests
        run: |
          cd ml
          pytest -xvs
  
  train-model:
    needs: lint-and-test
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.train_model == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd ml
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Download dataset from S3
        run: |
          cd ml
          aws s3 cp s3://${{ secrets.S3_BUCKET }}/datasets/training_manifest.csv ./data/
          aws s3 cp --recursive s3://${{ secrets.S3_BUCKET }}/datasets/images/ ./data/images/
      
      - name: Train model
        run: |
          cd ml
          python train.py \
            --manifest ./data/training_manifest.csv \
            --epochs 10 \
            --batch-size 32 \
            --model-name tf_efficientnet_b0 \
            --img-size 224 \
            --experiment-name production_training \
            --run-name github_ci_run \
            --val-size 0.2 \
            --export-model
      
      - name: Upload model artifacts to S3
        run: |
          cd ml
          aws s3 cp --recursive ./artifacts/ s3://${{ secrets.S3_BUCKET }}/models/$(date +%Y-%m-%d)/
      
      - name: Register model in MLflow
        run: |
          cd ml
          python -c "import mlflow; mlflow.register_model('runs:/$(cat artifacts/run_id.txt)/model', 'crop-disease-model')"
  
  deploy-model:
    needs: [lint-and-test]
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_model == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Download latest model from S3
        run: |
          mkdir -p ml/models
          aws s3 cp --recursive s3://${{ secrets.S3_BUCKET }}/models/latest/ ml/models/
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./ml
          file: ./ml/Dockerfile.inference
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/khetisahayak-inference:latest,${{ secrets.DOCKERHUB_USERNAME }}/khetisahayak-inference:${{ github.sha }}
      
      - name: Deploy to Kubernetes
        if: ${{ secrets.K8S_DEPLOY == 'true' }}
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/stable.txt"
          curl -LO "https://dl.k8s.io/$(cat stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Configure kubectl
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=./kubeconfig.yaml
          
          # Update deployment
          kubectl set image deployment/khetisahayak-inference khetisahayak-inference=${{ secrets.DOCKERHUB_USERNAME }}/khetisahayak-inference:${{ github.sha }} --record